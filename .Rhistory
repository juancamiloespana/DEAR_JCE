main="Gráfico de interacciones")
anova_franc=aov(ventas$ventas~ventas$Costa*ventas$Menu)
summary(anova_franc)
medias<-model.tables(x=anova_franc,type="means")
medias
efectos<-model.tables(x=anova_franc,type="effects")
efectos
medias
ventas$Menu=as.factor(ventas$Menu)
mean(ventas$ventas)
sigma=sd(ventas$ventas)
delta=18
d= delta/sigma
power=0.80
sig=0.10
pwr.t.test(d=d, sig.level=sig, power = power)
power.t.test(d=delta, sd=sigma, sig.level = sig,power=power)
par(mfrow=c(1,2))
boxplot(ventas$ventas~Costa,main="Ventas por costa",ylab="ventas semanales miles de dólares")
plotmeans(ventas$ventas~Costa,main="Ventas por costa",ylab="ventas semanales miles de dólares")
boxplot(ventas$ventas~Menu,main="Ventas por Menu",ylab="ventas semanales miles de dólares")
plotmeans(ventas$ventas~Menu,main="Ventas por Menu",ylab="ventas semanales miles de dólares")
formula=ventas$ventas~ventas$Menu +ventas$Costa
plot.design(formula,  xlab="Efectos", ylab="Ventas semanales", main="Comparación efectos principales")
interaction.plot(x.factor =   ventas$Costa,trace.factor=ventas$Menu,
response= ventas$ventas,
trace.label = "Menu",xlab = "Costa",
ylab="Ventas semanales",
main="Gráfico de interacciones")
interaction.plot(x.factor =   ventas$Menu,trace.factor=ventas$Costa,
response= ventas$ventas,
trace.label = "Costa",xlab = "Menu",
ylab="",
main="Gráfico de interacciones")
anova_franc=aov(ventas$ventas~ventas$Costa*ventas$Menu)
summary(anova_franc)
medias<-model.tables(x=anova_franc,type="means")
medias
library(readxl)
DatosPesas <- read_excel("D:/Docencia/MUSE/revision_r/DatosPesas.xlsx")
View(DatosPesas)
DatosPesas$Peso=as.factor(DatosPesas$Peso)
DatosPesas$Mano=as.factor(DatosPesas$Mano)
attach(DatosPesas)
mean(Repeticiones)
sigma = sd(Repeticiones)
delta = 5
d = delta/sigma
power = 0.90
sig = 0.05
pwr.t.test(d=d, sig.level=sig, power = power)
library(graphics)
library(gplots)
library(readxl)
library(agricolae)
library(pwr)
library(car)
library(tseries)
library(nortest)
library(goftest)
library(lmtest)
pwr.t.test(d=d, sig.level=sig, power = power)
power.t.test(d=delta, sd=sigma, sig.level = sig,power=power)
# Punto 5.a.
par(mfrow=c(1,2))
boxplot(Repeticiones~Peso, main="Repeticiones de acuerdo al peso")
boxplot(Repeticiones~Mano, main="Repeticiones por mano")
boxplot(Repeticiones~Peso, main="Repeticiones de acuerdo al peso")
boxplot(Repeticiones~Mano, main="Repeticiones por mano")
plotmeans(Repeticiones~Peso,bars=T, main="Repeticiones de acuerdo al peso")
plotmeans(Repeticiones~Mano,bars=T, main="Repeticiones por mano")
# Punto 5.b.
par(mfrow=c(1,1))
formula <- Repeticiones~Peso+Mano
plot.design(formula, col= 4, xlab="Efectos", ylab="Promedio de crecimiento", main="Comparación de efectos principales")
par(mfrow=c(1,2))
interaction.plot(Peso, Mano, Repeticiones, ylab="Repeticiones", main="Interacciones")
interaction.plot( Mano, Peso, Repeticiones, ylab="Repeticiones", main="Interacciones")
anova_Pesas=aov(Repeticiones~Peso*Mano)
summary(anova_Pesas)
# Tabla de medias - Punto 6
mediasPesas<-model.tables(x=anova_Pesas,type="means")
mediasPesas
# Tabla de efectos - Punto 7
efectosPesas<-model.tables(x=anova_Pesas,type="effects")
efectosPesas
summary(anova_Pesas)
thsdPesas<-TukeyHSD(anova_Pesas)
plot(thsdPesas)
hsdPesas<-HSD.test(y=anova_Pesas, trt=c("Mano","Peso"), console=T, group=F)
hsddfPesas=data.frame(hsdPesas$comparison)
write.csv(hsddfPesas,"hsddfPesas.csv")
#lsdPesas<-LSD.test(y=anova_Pesas, trt=c("Repeticiones$Peso","Repeticiones$Mano"), console=T, group=F)
lsdPesas<-LSD.test(y=anova_Pesas,trt=c("Mano","Peso"))
lsddfPesas=data.frame(lsdPesas$comparison)
write.table(lsddfPesas,"lsddfPesas.csv",sep=";")
lsdPesas
#lsdPesas<-LSD.test(y=anova_Pesas, trt=c("Repeticiones$Peso","Repeticiones$Mano"), console=T, group=F)
lsdPesas<-LSD.test(y=anova_Pesas,trt=c("Mano","Peso"), group=F)
lsddfPesas=data.frame(lsdPesas$comparison)
lsdPesas
lsdPesas
#lsdPesas<-LSD.test(y=anova_Pesas, trt=c("Repeticiones$Peso","Repeticiones$Mano"), console=T, group=F)
lsdPesas<-LSD.test(y=anova_Pesas,trt=c("Mano","Peso"), group=F)
#lsdPesas<-LSD.test(y=anova_Pesas, trt=c("Repeticiones$Peso","Repeticiones$Mano"), console=T, group=F)
lsdPesas<-LSD.test(y=anova_Pesas,trt=c("Mano","Peso"), group=F)
lsdPesas
library(gplots) ### para gráfico de plotmeans
library(car) ###función aov
library(agricolae) ###Para comparación de tratamientos
library(WRS2) ###Paquete con conjunto de datos ejemplo
library(ggpubr) ####Gráficos para vraibles agrupadas
library(rstatix) ### para función shapiro_test agrupada
data(hangover)
attach(hangover)
hangover$id=as.factor(hangover$id)
data(hangover)
attach(hangover)
hangover$id=as.factor(hangover$id)
sudoku<-read.csv("tiempos_sudokus_nn.csv",sep=";")
View(sudoku)
data(hangover)
attach(hangover)
par(mfrow=c(1,2))
boxplot(hangover$symptoms~hangover$time)
plotmeans(hangover$symptoms~hangover$time)
boxplot(hangover$symptoms~hangover$group)
plotmeans(hangover$symptoms~hangover$group)
data(hangover)
attach(hangover)
hangover$id=as.factor(hangover$id)
par(mfrow=c(1,2))
boxplot(hangover$symptoms~hangover$time)
plotmeans(hangover$symptoms~hangover$time)
boxplot(hangover$symptoms~hangover$group)
plotmeans(hangover$symptoms~hangover$group)
interaction.plot(time,group,symptoms)
interaction.plot(group,hangover$time,symptoms)
ggqqplot(hangover, "symptoms", facet.by = c("time","group"))
hangover %>%
group_by(time, group) %>%
shapiro_test(symptoms)
anova_hang<-anova_test(data=hangover,dv=symptoms,wid=id,within= time, between=group)
anova_hang
anova_hang<-anova_test(data=hangover,dv=symptoms,wid=id,within= time, between=group)
anova_hang
anova_hang<-anova_test(data=hangover,dv=symptoms,wid=id,within= time, between=group)
anova_hang
anova_hang<-anova_test(data=hangover,dv=symptoms,wid=id,within= time, between=group)
anova_hang
anova_hang2=aov(symptoms~ time*group +Error(id))
summary(anova_hang2)
pairwise.t.test(symptoms,time,paired=T,p.adjust.method = "bonferroni") ### para un solo factor
### prueba para varios factores
pwc <- hangover %>%
group_by(c(time)) %>%
pairwise_t_test(
symptoms ~ group, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
library(gplots) ### para gráfico de plotmeans
library(car) ###función aov
library(agricolae) ###Para comparación de tratamientos
library(WRS2) ###Paquete con conjunto de datos ejemplo
library(ggpubr) ####Gráficos para vraibles agrupadas
library(rstatix)
data(hangover)
attach(hangover)
View(hangover)
View(hangover)
hangover$id=as.factor(hangover$id)
par(mfrow=c(1,2))
boxplot(hangover$symptoms~hangover$time)
plotmeans(hangover$symptoms~hangover$time)
boxplot(hangover$symptoms~hangover$group)
plotmeans(hangover$symptoms~hangover$group)
interaction.plot(time,group,symptoms)
interaction.plot(group,hangover$time,symptoms)
interaction.plot(time,group,symptoms)
interaction.plot(group,hangover$time,symptoms)
ggqqplot(hangover, "symptoms", facet.by = c("time","group"))
hangover %>%
group_by(time, group) %>%
shapiro_test(symptoms)
hangover %>%
group_by(time, group) %>%
shapiro_test(symptoms)
anova_hang<-anova_test(data=hangover,dv=symptoms,wid=id,within= time, between=group)
anova_hang
anova_hang<-anova_test(data=hangover,dv=symptoms,wid=id,within= time, between=group)
anova_hang
summary(anova_hang2)
anova_hang2=aov(symptoms~ time*group +Error(id))
summary(anova_hang2)
anova_hang2=aov(symptoms~ time*group +Error(id))
summary(anova_hang2)
pairwise.t.test(symptoms,time,paired=T,p.adjust.method = "bonferroni") ### para un solo factor
pwc <- hangover %>%
group_by(c(time)) %>%
pairwise_t_test(
symptoms ~ group, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
pwc <- hangover %>%
group_by(c(time)) %>%
pairwise_t_test(
symptoms ~ group, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
sudoku=read.csv("tiempos_sudokus_nn.csv")
sudoku=read.csv("tiempos_sudokus_nn.csv")
View(sudoku)
sudoku=read.csv("tiempos_sudokus_nn.csv";sep=";")
sudoku=read.csv("tiempos_sudokus_nn.csv",sep=";")
attach(sudoku)
sudoku$num=as.factor(sudoku$num)
par(mfrow=c(1,2))
boxplot(tiempo~tipo)
boxplot(tiempo~tipo)
plotmeans(tiempo~tipo)
boxplot(tiempo~tipo)
plotmeans(tiempo~tipo)
interaction.plot(tipo,num,tiempo)
interaction.plot(num,tipo,tiempo)
interaction.plot(tipo,num,tiempo)
ggqqplot(sudoku, "tiempo", facet.by = "tipo")
library(gplots) ### para gráfico de plotmeans
library(car) ###función aov
library(agricolae) ###Para comparación de tratamientos
library(WRS2) ###Paquete con conjunto de datos ejemplo
library(ggpubr) ####Gráficos para vraibles agrupadas
library(rstatix) ### para función shapiro_test agrupada
ggqqplot(sudoku, "tiempo", facet.by = "tipo")
hangover %>%
group_by(time, group) %>%
shapiro_test(symptoms)
hangover %>%
group_by(tipo) %>%
shapiro_test(tiempo)
hangover %>%
group_by(tipo) %>%
shapiro_test(tiempo)
sudoku=read.csv("tiempos_sudokus_nn.csv",sep=";",stringsAsFactors = T)
sudoku$num=as.factor(sudoku$num)
attach(sudoku)
hangover %>%
group_by(tipo) %>%
shapiro_test(tiempo)
sudoku %>%
group_by(tipo) %>%
shapiro_test(tiempo)
anova_sudoku<-anova_test(data=sudoku,dv=tiempo,wid=num,within= tipo)
anova_sudoku
anova_sudoku2=aov(tiempo~ tipo +Error(num))
summary(anova_hang2)
summary(anova_sudoku2)
pairwise.t.test(tiempo,tipo,paired=T,p.adjust.method = "bonferroni") ### para un solo factor
anova_sudoku<-anova_test(data=sudoku,dv=tiempo,wid=num,within= tipo)
anova_sudoku
anova_sudoku2=aov(tiempo~ tipo +Error(num))
summary(anova_sudoku2)
data(hangover)
attach(hangover)
hangover$id=as.factor(hangover$id)
par(mfrow=c(1,2))
boxplot(hangover$symptoms~hangover$time)
plotmeans(hangover$symptoms~hangover$time)
boxplot(hangover$symptoms~hangover$group)
plotmeans(hangover$symptoms~hangover$group)
interaction.plot(time,group,symptoms)
interaction.plot(group,hangover$time,symptoms)
ggqqplot(hangover, "symptoms", facet.by = c("time","group"))
hangover %>%
group_by(time, group) %>%
shapiro_test(symptoms)
anova_hang<-anova_test(data=hangover,dv=symptoms,wid=id,within= time, between=group)
anova_hang
anova_hang2=aov(symptoms~ time*group +Error(id))
summary(anova_hang2)
summary(anova_sudoku2)
library(gplots) ### para gráfico de plotmeans
library(car) ###función aov
library(agricolae) ###Para comparación de tratamientos
library(WRS2) ###Paquete con conjunto de datos ejemplo
library(ggpubr) ####Gráficos para vraibles agrupadas
library(rstatix) ### para función shapiro_test agrupada
sudoku=read.csv("tiempos_sudokus_nn.csv",sep=";",stringsAsFactors = T)
View(sudoku)
sudoku$num=as.factor(sudoku$num)
attach(sudoku)
boxplot(tiempo~tipo)
boxplot(tiempo~tipo)
boxplot(tiempo~tipo)
plotmeans(tiempo~tipo)
interaction.plot(num,tipo,tiempo)
interaction.plot(tipo,num,tiempo)
ggqqplot(sudoku, "tiempo", facet.by = "tipo")
sudoku %>%
group_by(tipo) %>%
shapiro_test(tiempo)
anova_sudoku<-anova_test(data=sudoku,dv=tiempo,wid=num,within= tipo)
anova_sudoku
anova_sudoku
anova_sudoku2=aov(tiempo~ tipo +Error(num))
summary(anova_sudoku2)
pairwise.t.test(tiempo,tipo,paired=T,p.adjust.method = "bonferroni") ### para un solo factor
rm(list=ls())
########### cargar librerías
library(datarium)
library(tidyverse)
library(gplots)
library(rstatix)
library(ggpubr)
data("selfesteem")
force(selfesteem)
View(selfesteem)
selfesteem$id=as.factor(selfesteem$id)
View(selfesteem)
View(selfesteem)
View(selfesteem)
selfesteem <- selfesteem %>%
gather(key = "time", value = "score", t1, t2, t3)
View(selfesteem)
selfesteem$time=as.factor(selfesteem$time)
attach(selfesteem)
par(mfrow=c(1,2))
boxplot(score~time)
par(mfrow=c(1,2))
boxplot(score~time)
plotmeans(score~time)
interaction.plot(time,id,score)
interaction.plot(id,time,score)
data("selfesteem")
force(selfesteem)
View(selfesteem)
selfesteem <- selfesteem %>%
gather(key = "time", value = "score", t1, t2, t3)
View(selfesteem)
View(selfesteem)
selfesteem <- selfesteem %>%
gather(key = "time", value = "score", t1, t2, t3)
selfesteem <- selfesteem %>%
gather(key = "time", value = "score", t1, t2, t3)
data("selfesteem")
selfesteem$id=as.factor(selfesteem$id)
View(selfesteem)
selfesteem <- selfesteem %>%
gather(key = "time", value = "score", t1, t2, t3)
selfesteem <- selfesteem %>%
gather(key = "time", value = "score", t1, t2, t3)
View(selfesteem)
data("selfesteem")
selfesteem$id=as.factor(selfesteem$id)
selfesteem2 <- selfesteem %>%
gather(key = "time", value = "score", t1, t2, t3)
selfesteem2$time=as.factor(selfesteem$time)
selfesteem2 <- selfesteem %>%
gather(key = "time", value = "score", t1, t2, t3)
selfesteem$time=as.factor(selfesteem$time)
View(selfesteem)
selfesteem <- selfesteem %>%
gather(key = "time", value = "score", t1, t2, t3)
selfesteem$time=as.factor(selfesteem$time)
ggqqplot(selfesteem, "score", facet.by = "time")
selfesteem %>%
group_by(time) %>%
shapiro_test(score)
automestima1<-anova_test(data=selfesteem,dv=score,wid=id,within=time)
automestima1
automestima2=aov(score~time+Error(id))
summary(automestima2)
pwc <- selfesteem %>%
pairwise_t_test(
score ~ time, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
pwc <- selfesteem %>%
pairwise_t_test(
score ~ time, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
pwc <- selfesteem %>%
pairwise_t_test(
score ~ time, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
pwc
pwc <- pairwise_t_test(
score ~ time, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
pairwise_t_test(
score ~ time, paired = TRUE,
p.adjust.method = "bonferroni"
)
###Comparación de tratamientos #
pairwise_t_test( score, time, paired = TRUE, p.adjust.method = "bonferroni")
###Comparación de tratamientos #
pairwise_t_test( score, time, paired = TRUE, p.adjust.method = "bonferroni")
###Comparación de tratamientos #
pairwise.t.test(score,time,paired=T,p.adjust.method = "bonferroni") ### para un solo factor
pairwise.t.test(score,time,paired=T,p.adjust.method = "bonferroni") ### para un solo factor
data("selfesteem2", package = "datarium")
data("selfesteem2", package = "datarium")
force(selfesteem2)
View(selfesteem2)
View(selfesteem2)
selfesteem2 <- selfesteem2 %>%
gather(key = "time2", value = "score", t1, t2, t3)
View(selfesteem2)
data("selfesteem2", package = "datarium")
head(selfesteem2)
selfesteem2$id=as.factor(selfesteem2$id)
selfesteem2 <- selfesteem2 %>%
gather(key = "time", value = "score", t1, t2, t3)
View(selfesteem2)
selfesteem2$time=as.factor(selfesteem2$time)
attach(selfesteem2)
par(mfrow=c(1,2))
boxplot(score~time)
plotmeans(score~time)
par(mfrow=c(1,2))
boxplot(score~treatment)
plotmeans(score~treatment)
boxplot(score~treatment+time)
boxplot(score~treatment+time)
interaction.plot(time,treatment,score)
interaction.plot(treatment, time,score)
ggqqplot(selfesteem2, "score", facet.by = c("time","treatment"))
selfesteem2 %>%
group_by(time,treatment) %>%
shapiro_test(score)
selfesteem2 %>%
group_by(time,treatment) %>%
shapiro_test(score)
automestima1<-anova_test(data=selfesteem2,dv=score,wid=id,within=c(time,treatment))
automestima1
automestima1
automestima2=aov(score~time*treatment+Error(id))
summary(automestima2)
pwc <- selfesteem2 %>%
group_by(c(treatment)) %>%
pairwise_t_test(
score ~ time, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
pwc
View(automestima2)
View(selfesteem2)
data("anxiety", package = "datarium")
head(anxiety)
View(anxiety)
anxiety <- anxiety %>%
gather(key = "time", value = "score", t1, t2, t3)
data("anxiety", package = "datarium")
head(anxiety)
anxiety <- anxiety %>%
gather(key = "time", value = "score", t1, t2, t3)
anxiety$id<-as.factor(anxiety$id)
anxiety$id<-as.factor(anxiety$id)
anxiety <- anxiety %>%
gather(key = "time", value = "score", t1, t2, t3)
View(anxiety)
anxiety$time<-as.factor(anxiety$time)
View(anxiety)
par(mfrow=c(1,2))
boxplot(score~time)
par(mfrow=c(1,2))
boxplot(score~time)
plotmeans(score~time)
par(mfrow=c(1,2))
boxplot(score~group)
plotmeans(score~group)
boxplot(score~group)
attach(anxiety)
par(mfrow=c(1,2))
boxplot(score~time)
plotmeans(score~time)
par(mfrow=c(1,2))
boxplot(score~group)
plotmeans(score~group)
boxplot(score~time+group)
boxplot(score~time+group)
interaction.plot(time,group,score)
interaction.plot(group, time,score)
ggqqplot(anxiety, "score", facet.by = c("time","group"))
anxiety%>%
group_by(time,group) %>%
shapiro_test(score)
ansiedad1<- anova_test(
data = anxiety, dv = score, wid = id,
between = group, within = time
)
ansiedad1
ansiedad2=aov(score~time*group+Error(id))
summary(ansiedad2)
pwc <- anxiety %>%
group_by(group) %>%
pairwise_t_test(score ~ time, p.adjust.method = "bonferroni", paired=T)
pwc
data("selfesteem")
data("selfesteem")
force(selfesteem)
View(selfesteem)
