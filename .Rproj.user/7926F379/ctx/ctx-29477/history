3*4
print("hola")
3*4
3*4
a=3*4
b=a*3
data("CO2")
print("hola")
force(CO2)
install.packages("rpart")
### para ayudas de funciones
help(runif)
help(rnorm)
help(lm)
help(plot)
anos_exp<-rnorm(n=1000,  mean=20, sd=2) ### FunciÃ³n para crear npumeros aleatorios normales
anos_exp
anos_exp2
anos_exp2<-runif(n=1000, max=20, min=0) ### FunciÃ³n para crear npumeros aleatorios uniformes
salario<-300*anos_exp2 + rnorm(n=1000, mean=0, sd=700) ###para crear variable respuesta que depena de explicativa y con error aleatorio normal
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas crar una tabla tipo data.frame
View(datos)
anos_exp2<-runif(1000, max=20, min=0) ### FunciÃ³n para crear npumeros aleatorios uniformes
View(datos)
install.packages("plotly")
anos_exp2<-runif(n=1000, max=20, min=0) ## es el nombre fijo que tienen los valores de entrada de una función
salario<-300*anos_exp2 + rnorm(n=1000, mean=0, sd=700)
edades=c(19, 25, 21,18)
edades=(19, 25, 21,18)
edades=(19, 25, 21,18)
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
?runif
help(runif) # la función help también abre la ayuda
hist(datos$anos_exp2) ###para grÃ¡ficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para grÃ¡fico de dispersiÃ³n x y y
hist(datos$salario) ###para grÃ¡ficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para grÃ¡fico de dispersiÃ³n x y y
summary(modelo2) ### para ver resumen de modelo de regresiÃ³n lineal
modelo1<-lm(datos$salario~datos$anos_exp2)###para ajustar modelo de regresiÃ³n lineal desde variables y no desde tabla
modelo2<-lm(formula=salario~anos_exp2, data=datos)  ###para ajustar modelo de regresiÃ³n lineal desde data frame
summary(modelo2) ### para ver resumen de modelo de regresiÃ³n lineal
## el argumentoes el nombre fijo que tienen los valores de entrada de una función
anos_exp2=runif(n=1000, max=4, min=1) ### Funcion para crear npumeros aleatorios uniformes
salario=3+ 1.5*anos_exp2 + rnorm(n=1000, mean=0, sd=700) # crea la variable salario en función de los años de experiencia
salario=3+ 1.5*anos_exp2 + rnorm(n=1000, mean=0, sd=1) # crea la variable salario en función de los años de experiencia
#a la ayuda se accede por la pestaña help de la ventana derecha inferior
help(runif) # la función help también abre la ayuda
edades=c(19, 25, 21,18) ## se crea poniendo una c antes del parentesis
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
datos$anos_exp2 # el simbolo pesos sirve para accede a elementos del objeto
hist(datos$salario) ###para grÃ¡ficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para grÃ¡fico de dispersiÃ³n x y y
modelo1<-lm(datos$salario~datos$anos_exp2)###para ajustar modelo de regresiÃ³n lineal desde variables y no desde tabla
modelo2<-lm(formula=salario~anos_exp2, data=datos)  ###para ajustar modelo de regresiÃ³n lineal desde data frame
summary(modelo2) ### para ver resumen de modelo de regresiÃ³n lineal
## el argumentoes el nombre fijo que tienen los valores de entrada de una función
anos_exp2=runif(n=1000, max=10, min=1) ### Funcion para crear npumeros aleatorios uniformes
salario=3+ 1.5*anos_exp2 + rnorm(n=1000, mean=0, sd=1) # crea la variable salario en función de los años de experiencia
#a la ayuda se accede por la pestaña help de la ventana derecha inferior
help(runif) # la función help también abre la ayuda
?runif #cuando se antepone el simbolo ? antes del nombre de la función también abre la ayuda
edades=c(19, 25, 21,18) ## se crea poniendo una c antes del parentesis
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
datos$anos_exp2 # el simbolo pesos sirve para accede a elementos del objeto
hist(datos$salario) ###para grÃ¡ficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para grÃ¡fico de dispersiÃ³n x y y
summary(modelo2) ### para ver resumen de modelo de regresiÃ³n lineal
salario=1+ 0.5*anos_exp2 + rnorm(n=1000, mean=0, sd=1) # crea la variable salario en función de los años de experiencia
#a la ayuda se accede por la pestaña help de la ventana derecha inferior
help(runif) # la función help también abre la ayuda
?runif #cuando se antepone el simbolo ? antes del nombre de la función también abre la ayuda
edades=c(19, 25, 21,18) ## se crea poniendo una c antes del parentesis
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
datos$anos_exp2 # el simbolo pesos sirve para accede a elementos del objeto
hist(datos$salario) ###para grÃ¡ficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para grÃ¡fico de dispersiÃ³n x y y
salario=3+ 0.5*anos_exp2 + rnorm(n=1000, mean=0, sd=1) # crea la variable salario en función de los años de experiencia
#a la ayuda se accede por la pestaña help de la ventana derecha inferior
help(runif) # la función help también abre la ayuda
?runif #cuando se antepone el simbolo ? antes del nombre de la función también abre la ayuda
edades=c(19, 25, 21,18) ## se crea poniendo una c antes del parentesis
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
datos$anos_exp2 # el simbolo pesos sirve para accede a elementos del objeto
hist(datos$salario) ###para grÃ¡ficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para grÃ¡fico de dispersiÃ³n x y y
modelo1<-lm(datos$salario~datos$anos_exp2)###para ajustar modelo de regresiÃ³n lineal desde variables y no desde tabla
modelo2<-lm(formula=salario~anos_exp2, data=datos)  ###para ajustar modelo de regresiÃ³n lineal desde data frame
summary(modelo2) ### para ver resumen de modelo de regresiÃ³n lineal
salario=3+ 0.7*anos_exp2 + rnorm(n=1000, mean=0, sd=1) # crea la variable salario en función de los años de experiencia
#a la ayuda se accede por la pestaña help de la ventana derecha inferior
help(runif) # la función help también abre la ayuda
?runif #cuando se antepone el simbolo ? antes del nombre de la función también abre la ayuda
edades=c(19, 25, 21,18) ## se crea poniendo una c antes del parentesis
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
datos$anos_exp2 # el simbolo pesos sirve para accede a elementos del objeto
hist(datos$salario) ###para grÃ¡ficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para grÃ¡fico de dispersiÃ³n x y y
salario=3+ 0.9*anos_exp2 + rnorm(n=1000, mean=0, sd=1) # crea la variable salario en función de los años de experiencia
#a la ayuda se accede por la pestaña help de la ventana derecha inferior
help(runif) # la función help también abre la ayuda
?runif #cuando se antepone el simbolo ? antes del nombre de la función también abre la ayuda
edades=c(19, 25, 21,18) ## se crea poniendo una c antes del parentesis
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
datos$anos_exp2 # el simbolo pesos sirve para accede a elementos del objeto
hist(datos$salario) ###para grÃ¡ficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para grÃ¡fico de dispersiÃ³n x y y
modelo1<-lm(datos$salario~datos$anos_exp2)###para ajustar modelo de regresiÃ³n lineal desde variables y no desde tabla
modelo2<-lm(formula=salario~anos_exp2, data=datos)  ###para ajustar modelo de regresiÃ³n lineal desde data frame
summary(modelo2) ### para ver resumen de modelo de regresiÃ³n lineal
## el argumentoes el nombre fijo que tienen los valores de entrada de una función
anos_exp2=runif(n=30, max=10, min=1) ### Funcion para crear npumeros aleatorios uniformes
salario=3+ 0.9*anos_exp2 + rnorm(n=30, mean=0, sd=1) # crea la variable salario en función de los años de experiencia
#a la ayuda se accede por la pestaña help de la ventana derecha inferior
help(runif) # la función help también abre la ayuda
?runif #cuando se antepone el simbolo ? antes del nombre de la función también abre la ayuda
edades=c(19, 25, 21,18) ## se crea poniendo una c antes del parentesis
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
datos$anos_exp2 # el simbolo pesos sirve para accede a elementos del objeto
hist(datos$salario) ###para grÃ¡ficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para grÃ¡fico de dispersiÃ³n x y y
modelo1<-lm(datos$salario~datos$anos_exp2)###para ajustar modelo de regresiÃ³n lineal desde variables y no desde tabla
modelo2<-lm(formula=salario~anos_exp2, data=datos)  ###para ajustar modelo de regresiÃ³n lineal desde data frame
summary(modelo2) ### para ver resumen de modelo de regresiÃ³n lineal
plot(datos$anos_exp2,datos$salario) ###para grÃ¡fico de dispersiÃ³n x y y
salario=3.0+ 1.2*anos_exp2 + rnorm(n=30, mean=0, sd=1) # crea la variable salario en función de los años de experiencia
#a la ayuda se accede por la pestaña help de la ventana derecha inferior
help(runif) # la función help también abre la ayuda
?runif #cuando se antepone el simbolo ? antes del nombre de la función también abre la ayuda
edades=c(19, 25, 21,18) ## se crea poniendo una c antes del parentesis
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
datos$anos_exp2 # el simbolo pesos sirve para accede a elementos del objeto
hist(datos$salario) ###para grÃ¡ficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para grÃ¡fico de dispersiÃ³n x y y
salario=2.5+ 1.2*anos_exp2 + rnorm(n=30, mean=0, sd=1) # crea la variable salario en función de los años de experiencia
#a la ayuda se accede por la pestaña help de la ventana derecha inferior
help(runif) # la función help también abre la ayuda
?runif #cuando se antepone el simbolo ? antes del nombre de la función también abre la ayuda
edades=c(19, 25, 21,18) ## se crea poniendo una c antes del parentesis
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
datos$anos_exp2 # el simbolo pesos sirve para accede a elementos del objeto
hist(datos$salario) ###para grÃ¡ficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para grÃ¡fico de dispersiÃ³n x y y
salario=2.5+ 1.1*anos_exp2 + rnorm(n=30, mean=0, sd=1) # crea la variable salario en función de los años de experiencia
#a la ayuda se accede por la pestaña help de la ventana derecha inferior
help(runif) # la función help también abre la ayuda
?runif #cuando se antepone el simbolo ? antes del nombre de la función también abre la ayuda
edades=c(19, 25, 21,18) ## se crea poniendo una c antes del parentesis
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
datos$anos_exp2 # el simbolo pesos sirve para accede a elementos del objeto
hist(datos$salario) ###para grÃ¡ficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para grÃ¡fico de dispersiÃ³n x y y
salario=2.5+ 1.0*anos_exp2 + rnorm(n=30, mean=0, sd=1) # crea la variable salario en función de los años de experiencia
#a la ayuda se accede por la pestaña help de la ventana derecha inferior
help(runif) # la función help también abre la ayuda
?runif #cuando se antepone el simbolo ? antes del nombre de la función también abre la ayuda
edades=c(19, 25, 21,18) ## se crea poniendo una c antes del parentesis
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
datos$anos_exp2 # el simbolo pesos sirve para accede a elementos del objeto
hist(datos$salario) ###para grÃ¡ficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para grÃ¡fico de dispersiÃ³n x y y
modelo1<-lm(datos$salario~datos$anos_exp2)###para ajustar modelo de regresiÃ³n lineal desde variables y no desde tabla
modelo2<-lm(formula=salario~anos_exp2, data=datos)  ###para ajustar modelo de regresiÃ³n lineal desde data frame
summary(modelo2) ### para ver resumen de modelo de regresiÃ³n lineal
## 1.Comentarios del c?digo:
## se antepone la tecla numeral
## 2.Verificar y Actualizar versi?n de R y Rstudio.
## 3.Instalar R y Rstudio / Rstudio_cloud / Google Colab
## 4.Opciones de apariencia.
## 5.Componentes de la interfaz
## 6.Crear proyecto y guardar proyecto, componentes.
## 7.Ejecutar c?digo ctrtl + enter
## 8.Instalaci?n de paquetes, Carga de paquetes
install.packages("plotly") ### esta funci?n instala paquetes
# estas dos funciones cargan el paquete a la memoria temporal funcionan igual
library(plotly)
require(plotly)
##9.Argumentos de una funci?n, valores por defecto,ayudas sobre funciones
### estos c?digos sirven para crear variables ficticias
## el argumentoes el nombre fijo que tienen los valores de entrada de una funci?n
anos_exp2=runif(n=30, max=10, min=1) ### Funcion para crear npumeros aleatorios uniformes
salario=2.5+ 1.0*anos_exp2 + rnorm(n=30, mean=0, sd=1) # crea la variable salario en funci?n de los a?os de experiencia
#a la ayuda se accede por la pesta?a help de la ventana derecha inferior
help(runif) # la funci?n help tambi?n abre la ayuda
?runif #cuando se antepone el simbolo ? antes del nombre de la funci?n tambi?n abre la ayuda
## 10.Vectores, nombre de variables, dataframe,
edades=c(19, 25, 21,18) ## se crea poniendo una c antes del parentesis
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
datos$anos_exp2 # el simbolo pesos sirve para accede a elementos del objeto
##11 gr?ficos basicos de variables num?ricas hist, plot
hist(datos$salario) ###para gráficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para gráfico de dispersión x y y
### para ajustar solo se identifica la variable respuesta y se pone antes de la virgulilla
modelo1<-lm(datos$salario~datos$anos_exp2)###para ajustar modelo de regresión lineal desde variables y no desde tabla
modelo2<-lm(formula=salario~anos_exp2, data=datos)  ###para ajustar modelo de regresión lineal desde data frame
summary(modelo2) ### para ver resumen de modelo de regresi?n lineal
## el argumentoes el nombre fijo que tienen los valores de entrada de una funci?n
set.seed(100)
anos_exp2=runif(n=30, max=10, min=1) ### Funcion para crear npumeros aleatorios uniformes
salario=2.5+ 1.0*anos_exp2 + rnorm(n=30, mean=0, sd=1) # crea la variable salario en funci?n de los a?os de experiencia
#a la ayuda se accede por la pesta?a help de la ventana derecha inferior
help(runif) # la funci?n help tambi?n abre la ayuda
?runif #cuando se antepone el simbolo ? antes del nombre de la funci?n tambi?n abre la ayuda
edades=c(19, 25, 21,18) ## se crea poniendo una c antes del parentesis
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
datos$anos_exp2 # el simbolo pesos sirve para accede a elementos del objeto
hist(datos$salario) ###para gráficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para gráfico de dispersión x y y
modelo1<-lm(datos$salario~datos$anos_exp2)###para ajustar modelo de regresión lineal desde variables y no desde tabla
modelo2<-lm(formula=salario~anos_exp2, data=datos)  ###para ajustar modelo de regresión lineal desde data frame
summary(modelo2) ### para ver resumen de modelo de regresi?n lineal
rificar y Actualizar versi?n de R y Rstudio.
## 3.Instalar R y Rstudio / Rstudio_cloud / Google Colab
## 4.Opciones de apariencia.
## 5.Componentes de la interfaz
## 6.Crear proyecto y guardar proyecto, componentes.
## 7.Ejecutar c?digo ctrtl + enter
## 8.Instalaci?n
library(plotly)
require(plotly)
anos_exp2=runif(30, 10, 1) ### Funcion para crear npumeros aleatorios uniformes
anos_exp2=runif(n=30, max=10, min=1) ### Funcion para crear npumeros aleatorios uniformes
salario=2.5+ 1.0*anos_exp2 + rnorm(n=30, mean=0, sd=1) # crea la variable salario en funci?n de los a?os de experiencia
#a la ayuda se accede por la pesta?a help de la ventana derecha inferior
help(runif) # la funci?n help tambi?n abre la ayuda
?runif
?runif
edades=(19, 25, 21,18) ## se crea poniendo una c antes del parentesis
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
datos<-data.frame(anos_exp2,salario)
hist(datos$salario)
plot(datos$anos_exp2,datos$salario) ###para gráfico de dispersión x y y
View(datos)
plot(datos$anos_exp2,datos$salario) ###para gráfico de dispersión x y y
modelo2<-lm(formula=salario~Anos_exp2, data=datos)  ###para ajustar modelo de regresión lineal desde data frame
modelo1<-lm(datos$salario~datos$anos_exp2)###para ajustar modelo de regresión lineal desde variables y no desde tabla
modelo2<-lm(formula=salario~anos_exp2, data=datos)  ###para ajustar modelo de regresión lineal desde data frame
summary(modelo2) ### para ver resumen de modelo de regresi?n lineal
summary(modelo1)
datos_resistencia<-read.csv("resistencia.csv",dec=".",sep=";", header= T, fileEncoding = "UTF-8")
plot(datos_resistencia$porcentaje,datos_resistencia$resistencia)
####Ajustar modelo de regresión lineal
modelo<-lm(formula=resistencia~porcentaje, data=datos_resistencia)
####GRafico de dispersión con modelo ajustado
plot(datos_resistencia$porcentaje,datos_resistencia$resistencia)
abline(modelo, col="red")
summary(modelo)
View(datos_resistencia)
View(datos_resistencia)
datos_resistencia2<-data.frame("porcentaje"=runif(5,max=195,min=160))
View(datos_resistencia2)
prediccion<-predict(modelo, datos_resistencia2, interval="prediction")  ### Intervalo de confianza para valores predichos de datos nuevos a los que se utilizaron para ajustar el modelo
data.frame(confidencia, prediccion)
int_confidencia<-predict(modelo, interval="confidence") ###Intervalo de confianza para valores predichos de datos con los que se ajustó el modelo
int_prediccion<-predict(modelo, datos_resistencia2, interval="prediction")  ### Intervalo de confianza para valores predichos de datos nuevos a los que se utilizaron para ajustar el modelo
int_confidencia
int_prediccion
View(datos_resistencia2)
View(datos)
View(datos_resistencia)
######## 1. Leer datos ######
###Cargar los datos desde un archivo .csv
##El separador de columnas 'sep' y separador decimal 'dec' pueden variar con la configuracion del pc
###si los datos no estÃ¡n dentro del proyecto, se debe poner la ruta completa donde estÃ¡:
### "D:/catedra/Salary_Data.csv"
###Si se pone mal el separador decimal, puede leer un valor nÃºmerico como texto
### Si se pone mal el separador de columnas, reconoce todo como si fuera una columna
datos_resistencia<-read.csv("resistencia.csv",dec=".",sep=";", header= T, fileEncoding = "UTF-8")
datos_resistencia2<-data.frame("porcentaje"=runif(5,max=195,min=160))
#####Diagrama de dispersión
plot(datos_resistencia$porcentaje,datos_resistencia$resistencia)
####Ajustar modelo de regresión lineal
modelo<-lm(formula=resistencia~porcentaje, data=datos_resistencia)
####GRafico de dispersión con modelo ajustado
plot(datos_resistencia$porcentaje,datos_resistencia$resistencia)
abline(modelo, col="red")
###REsumen del modelo
summary(modelo)
###Calcular MSE manualmente
sqrt(sum(modelo$residuals^2)/(length(datos_resistencia$porcentaje)-2))
mean(datos_resistencia$resistencia)
####Intervalos de confinza para B1 y B0
confint(modelo,level=0.90)
###### intervalos de Predicciones
predict(modelo) ###Valores predichos de la base utilizada, se puede usar para predecir conjunto de datos nuevo(lo veremos en regresión lineal múltiple)
modelo$fitted.values ## valores ajustados iguales a los de función predict (no aplica para datos nuevos)
int_confidencia<-predict(modelo, interval="confidence") ###Intervalo de confianza para valores predichos de datos con los que se ajustó el modelo
int_prediccion<-predict(modelo, datos_resistencia2, interval="prediction")  ### Intervalo de confianza para valores predichos de datos nuevos a los que se utilizaron para ajustar el modelo
int_confidencia
int_prediccion
View(datos_resistencia)
View(datos_resistencia2)
summary(modelo)
int_prediccion_entre<-predict(modelo, interval="prediction")###Intervalo de confianza para valores predichos de datos con los que se ajustó el modelo
int_prediccion_entre<
int_prediccion_entre<
int_prediccion_entre
int_confidencia
View(datos_resistencia2)
int_prediccion<-predict(modelo, newdata=datos_resistencia2, interval="prediction")  ### Intervalo de confianza para valores predichos de datos nuevos a los que se utilizaron para ajustar el modelo
int_prediccion
datos_resistencia$porcentaje
View(datos_resistencia)
View(datos_resistencia)
datos_resistencia2<-data.frame("porcentaje"=runif(5,max=24,min=35))
######## 1. Leer datos ######
###Cargar los datos desde un archivo .csv
##El separador de columnas 'sep' y separador decimal 'dec' pueden variar con la configuracion del pc
###si los datos no estÃ¡n dentro del proyecto, se debe poner la ruta completa donde estÃ¡:
### "D:/catedra/Salary_Data.csv"
###Si se pone mal el separador decimal, puede leer un valor nÃºmerico como texto
### Si se pone mal el separador de columnas, reconoce todo como si fuera una columna
datos_resistencia<-read.csv("resistencia.csv",dec=".",sep=";", header= T, fileEncoding = "UTF-8")
datos_resistencia2<-data.frame("porcentaje"=runif(5,max=24,min=35))
#####Diagrama de dispersión
plot(datos_resistencia$porcentaje,datos_resistencia$resistencia)
####Ajustar modelo de regresión lineal
modelo<-lm(formula=resistencia~porcentaje, data=datos_resistencia)
####GRafico de dispersión con modelo ajustado
plot(datos_resistencia$porcentaje,datos_resistencia$resistencia)
abline(modelo, col="red")
###REsumen del modelo
summary(modelo)
###Calcular MSE manualmente
sqrt(sum(modelo$residuals^2)/(length(datos_resistencia$porcentaje)-2))
mean(datos_resistencia$resistencia)
####Intervalos de confinza para B1 y B0
confint(modelo,level=0.90)
###### intervalos de Predicciones
predict(modelo) ###Valores predichos de la base utilizada, se puede usar para predecir conjunto de datos nuevo(lo veremos en regresión lineal múltiple)
modelo$fitted.values ## valores ajustados iguales a los de función predict (no aplica para datos nuevos)
int_confidencia<-predict(modelo, interval="confidence")
int_prediccion_entre<-predict(modelo, interval="prediction")###Intervalo de confianza para valores predichos de datos con los que se ajustó el modelo
int_prediccion<-predict(modelo, newdata=datos_resistencia2, interval="prediction")  ### Intervalo de confianza para valores predichos de datos nuevos a los que se utilizaron para ajustar el modelo
int_confidencia
int_prediccion
datos_resistencia$porcentaje
View(datos_resistencia)
View(datos_resistencia2)
datos_resistencia2<-data.frame("porcentaje"=runif(5,max=35,min=24))
View(datos_resistencia2)
######## 1. Leer datos ######
###Cargar los datos desde un archivo .csv
##El separador de columnas 'sep' y separador decimal 'dec' pueden variar con la configuracion del pc
###si los datos no estÃ¡n dentro del proyecto, se debe poner la ruta completa donde estÃ¡:
### "D:/catedra/Salary_Data.csv"
###Si se pone mal el separador decimal, puede leer un valor nÃºmerico como texto
### Si se pone mal el separador de columnas, reconoce todo como si fuera una columna
datos_resistencia<-read.csv("resistencia.csv",dec=".",sep=";", header= T, fileEncoding = "UTF-8")
datos_resistencia2<-data.frame("porcentaje"=runif(5,max=35,min=24))
#####Diagrama de dispersión
plot(datos_resistencia$porcentaje,datos_resistencia$resistencia)
####Ajustar modelo de regresión lineal
modelo<-lm(formula=resistencia~porcentaje, data=datos_resistencia)
####GRafico de dispersión con modelo ajustado
plot(datos_resistencia$porcentaje,datos_resistencia$resistencia)
abline(modelo, col="red")
###REsumen del modelo
summary(modelo)
###Calcular MSE manualmente
sqrt(sum(modelo$residuals^2)/(length(datos_resistencia$porcentaje)-2))
mean(datos_resistencia$resistencia)
####Intervalos de confinza para B1 y B0
confint(modelo,level=0.90)
###### intervalos de Predicciones
predict(modelo) ###Valores predichos de la base utilizada, se puede usar para predecir conjunto de datos nuevo(lo veremos en regresión lineal múltiple)
modelo$fitted.values ## valores ajustados iguales a los de función predict (no aplica para datos nuevos)
int_confidencia<-predict(modelo, interval="confidence")###Intervalo de confianza para valores predichos de datos con los que se ajustó el modelo
int_prediccion<-predict(modelo, newdata=datos_resistencia2, interval="prediction")  ### Intervalo de confianza para valores predichos de datos nuevos a los que se utilizaron para ajustar el modelo
int_confidencia
int_prediccion
library(Metrics)
mse(modelo)
mse(datos_resistencia$porcentaje, modelo$fitted.values)
rmse(datos_resistencia$porcentaje, modelo$fitted.values)
View(datos_resistencia2)
View(datos_resistencia)
rmse(datos_resistencia$resistencia, modelo$fitted.values)
mse(datos_resistencia$resistencia, modelo$fitted.values)
rmse(datos_resistencia$resistencia, modelo$fitted.values)
# estas dos funciones cargan el paquete a la memoria temporal funcionan igual
library(plotly)
require(plotly)
set.seed(100)
anos_exp2=runif(n=30, max=10, min=1) ### Funcion para crear npumeros aleatorios uniformes
salario=2.5+ 1.0*anos_exp2 + rnorm(n=30, mean=0, sd=1) # crea la variable salario en funci?n de los a?os de experiencia
datos<-data.frame(anos_exp2,salario) ###Con base en variables aleatorioas o vectores crear una tabla tipo data.frame
hist(datos$salario) ###para gráficas hsitograma
plot(datos$anos_exp2,datos$salario) ###para gráfico de dispersión x y y
modelo1<-lm(datos$salario~datos$anos_exp2)###para ajustar modelo de regresión lineal desde variables y no desde tabla
modelo2<-lm(formula=salario~anos_exp2, data=datos)  ###para ajustar modelo de regresión lineal desde data frame
summary(modelo2) ### para ver resumen de modelo de regresi?n lineal
summary(modelo1)
datos_resistencia<-read.csv("resistencia.csv",dec=".",sep=";", header= T, fileEncoding = "UTF-8")
datos_resistencia<-read.csv("D:/Docencia/DEAR/R_DEAR/resistencia.csv",dec=".",sep=";", header= T, fileEncoding = "UTF-8")
datos_resistencia<-read.csv("D:\Docencia\DEAR\R_DEAR\resistencia.csv",dec=".",sep=";", header= T, fileEncoding = "UTF-8")
datos_resistencia<-read.csv("D:\Docencia\DEAR\R_DEAR\resistencia.csv",dec=".",sep=";", header= T, fileEncoding = "UTF-8")
datos_resistencia<-read.csv("D:/Docencia/DEAR/R_DEAR/resistencia.csv",dec=".",sep=";", header= T, fileEncoding = "UTF-8")
datos_resistencia<-read.csv("D:/Docencia/DEAR/R_DEAR/resistencia.csv",dec=".",sep=";", header= T, fileEncoding = "UTF-8")
datos_resistencia2<-data.frame("porcentaje"=runif(5,max=35,min=24))
datos_resistencia<-read.csv("D:/Docencia/DEAR/R_DEAR/resistencia.csv",dec=".",sep=";", header= T, fileEncoding = "UTF-8")
datos_resistencia2<-data.frame("porcentaje"=runif(5,max=35,min=24))
##El separador de columnas 'sep' y separador decimal 'dec' pueden variar con la configuracion del pc
###S
datos_resistencia<-read.csv("resistencia.csv",dec=".",sep=";", header= T, fileEncoding = "UTF-8")
View(datos_resistencia)
datos_resistencia2<-data.frame("porcentaje"=runif(5,max=35,min=24))
View(datos_resistencia2)
plot(datos_resistencia$porcentaje,datos_resistencia$resistencia)
plot(datos_resistencia$porcentaje,datos_resistencia$resistencia)
plot(datos_resistencia$porcentaje,datos_resistencia$resistencia)
#### 2. Ajustar modelo de regresión lineal
modelo<-lm(formula=resistencia~porcentaje, data=datos_resistencia)
#### 2. Ajustar modelo de regresión lineal
modelo<-lm(formula=resistencia~porcentaje, data=datos_resistencia)
summary(modelo)
####GRafico de dispersión con modelo ajustado
plot(datos_resistencia$porcentaje,datos_resistencia$resistencia)
abline(modelo, col="red")
View(datos_resistencia)
confint(modelo,level=0.95)
predict(modelo)
datos_resistencia$porcentaje
data.frame(datos_resistencia$porcentaje,predict(modelo))
int_confidencia<-predict(modelo, interval="confidence")### 7.Intervalo de confianza para valores predichos de datos con los que se ajustó el modelo
int_confidencia
View(datos_resistencia2)
predict(modelo)
int_prediccion<-predict(modelo, newdata=datos_resistencia2, interval="prediction")  ### 8.ntervalo de predicción para valores predichos de datos nuevos a los que se utilizaron para ajustar el modelo
int_prediccion
data.frame(datos_resistencia2,int_prediccion)
library(car)
library(tseries)
library(nortest)
library(goftest)
library(lmtest)
install.packages("car")
install.packages("tseries")
install.packages("nortest")
